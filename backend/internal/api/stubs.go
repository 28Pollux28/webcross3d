// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package api

import (
	"fmt"

	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Health check
	// (GET /api/healthz)
	GetApiHealthz(c *fiber.Ctx) error
	// List all public puzzles
	// (GET /api/puzzles)
	GetApiPuzzles(c *fiber.Ctx) error
	// Get puzzle metadata and clues
	// (GET /api/puzzles/{id})
	GetApiPuzzlesId(c *fiber.Ctx, id string) error
	// Validate a voxel destruction action
	// (POST /api/puzzles/{id}/actions)
	PostApiPuzzlesIdActions(c *fiber.Ctx, id string) error
	// Start a new puzzle session
	// (POST /api/puzzles/{id}/start)
	PostApiPuzzlesIdStart(c *fiber.Ctx, id string) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// GetApiHealthz operation middleware
func (siw *ServerInterfaceWrapper) GetApiHealthz(c *fiber.Ctx) error {

	return siw.Handler.GetApiHealthz(c)
}

// GetApiPuzzles operation middleware
func (siw *ServerInterfaceWrapper) GetApiPuzzles(c *fiber.Ctx) error {

	return siw.Handler.GetApiPuzzles(c)
}

// GetApiPuzzlesId operation middleware
func (siw *ServerInterfaceWrapper) GetApiPuzzlesId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Params("id"), &id)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	return siw.Handler.GetApiPuzzlesId(c, id)
}

// PostApiPuzzlesIdActions operation middleware
func (siw *ServerInterfaceWrapper) PostApiPuzzlesIdActions(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Params("id"), &id)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	return siw.Handler.PostApiPuzzlesIdActions(c, id)
}

// PostApiPuzzlesIdStart operation middleware
func (siw *ServerInterfaceWrapper) PostApiPuzzlesIdStart(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Params("id"), &id)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	return siw.Handler.PostApiPuzzlesIdStart(c, id)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(m)
	}

	router.Get(options.BaseURL+"/api/healthz", wrapper.GetApiHealthz)

	router.Get(options.BaseURL+"/api/puzzles", wrapper.GetApiPuzzles)

	router.Get(options.BaseURL+"/api/puzzles/:id", wrapper.GetApiPuzzlesId)

	router.Post(options.BaseURL+"/api/puzzles/:id/actions", wrapper.PostApiPuzzlesIdActions)

	router.Post(options.BaseURL+"/api/puzzles/:id/start", wrapper.PostApiPuzzlesIdStart)

}
